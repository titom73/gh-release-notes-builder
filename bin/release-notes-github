#!/usr/bin/python
# coding: utf-8 -*-
#
#
# Copyright 2020 TiTom73
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: //www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse
import logging
import sys
from inetsix_release_notes_builder import (
    gh_get_milestone_content,
    get_contributors,
    templater
)


# Default template file
TEMPLATE_FILE = "default.j2"


def parse_cli():
    """
    Generate CLI options manager

    Returns
    -------
    dict
        dictionary with all options configured by user.
    """
    # Argparser to load information using CLI
    parser = argparse.ArgumentParser(
        description="Cloudvision Authentication stress script")
    parser.add_argument('-r', '--repository',
                        help='GH Repository like org/repo', type=str,
                        default='aristanetworks/ansible-avd')
    parser.add_argument('-m', '--milestone',
                        help='Milestone', type=str)
    parser.add_argument('-t', '--template',
                        help='Path to template', type=str,
                        default=TEMPLATE_FILE)
    parser.add_argument('-o', '--output',
                        help='File to save release-notes', type=str)
    parser.add_argument('-v', '--verbosity',
                        help='Verbose level (debug / info / warning / error / critical)',
                        type=str, default='info')
    options = parser.parse_args()

    return options


if __name__ == '__main__':
    """
    Main section.
    """

    cli = parse_cli()

    # Logging configuration
    LEVELS = {'debug': logging.DEBUG,
              'info': logging.INFO,
              'warning': logging.WARNING,
              'error': logging.ERROR,
              'critical': logging.CRITICAL}
    LOGLEVEL = LEVELS.get(cli.verbosity, logging.NOTSET)
    logging.basicConfig(
        format='%(asctime)s - %(levelname)-8s - func: %(funcName)-12s - %(message)s',
        level=LOGLEVEL,
        datefmt='%Y-%m-%d %H:%M:%S')

    logging.debug("Collecting information for milestone %s in repo %s", str(cli.milestone), str(cli.repository))

    milestone_content = gh_get_milestone_content(repository=cli.repository, milestone=cli.milestone)

    release_notes = templater(milestone=cli.milestone,
                              milestone_json=milestone_content,
                              contributors=get_contributors(milestone_prs=milestone_content['items']),
                              template_file=cli.template)

    if cli.output is None:
        print(release_notes)
    else:
        file = open(cli.output, "w")
        file.write(release_notes)
        file.close()
        print("Release notes saved under {}".format(cli.output))

    sys.exit(0)
